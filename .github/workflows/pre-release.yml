name: Build & Pre-Release

on:
  workflow_dispatch:
    inputs:
      target:
        description: "all"
        required: true
        default: all
        type: choice
        options:
          - all

jobs:
  build:    
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            build_type: Release
            target: windows
            cmake_options: "-DURHO3D_OPENGL=1"
                        
          - os: ubuntu-22.04
            c_compiler: clang
            cpp_compiler: clang++
            build_type: Release
            target: linux
            cmake_options: ""
            
    steps:
    - uses: actions/checkout@v4

    - name: Extract version from CMakeLists.txt
      id: extract_version
      shell: bash
      run: |
        VERSION=$(sed -nE 's/.*project\s*\(\s*FromBones\s+VERSION\s+([0-9]+\.[0-9]+\.[0-9]+).*/\1/p' CMakeLists.txt)
        echo "VERSION=$VERSION"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Setup Build Environnement Linux
      run: |
        sudo apt update
        sudo apt install -y --no-install-recommends libglu1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev
        sudo apt install -y --no-install-recommends libegl1-mesa-dev
        sudo apt install -y --no-install-recommends libxrandr-dev libxrender-dev libxss-dev libxxf86vm-dev
        sudo apt install -y --no-install-recommends libasound2-dev libpulse-dev libibus-1.0-dev
        sudo apt install -y --no-install-recommends libdbus-1-dev libreadline6-dev libssl-dev libudev-dev
      if: matrix.target == 'linux'
        
    - name: Cache Chocolatey packages
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v4
      with:
        path: C:\ProgramData\chocolatey\bin
        key: ${{ runner.os }}-choco-${{ hashFiles('**/choco-requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-choco-

    - name: Setup Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        if [ -d "C:\ProgramData\chocolatey\bin" ]; then
          echo "Restored Cache."
        fi

    - name: Configure Git for private repository access
      run: |
        git config --global url."https://${{ secrets.MY_GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        ${{ matrix.cmake_options }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Package with CPack
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cpack -G ZIP
      if: |
        (matrix.target == 'windows' && matrix.build_type == 'Release') ||
        (matrix.target == 'linux' && matrix.cpp_compiler == 'clang++' && matrix.build_type == 'Release')

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-${{ matrix.cpp_compiler }}-release-package
        path: ${{ steps.strings.outputs.build-output-dir }}/*.zip
      if: |
        (matrix.target == 'windows' && matrix.build_type == 'Release') ||
        (matrix.target == 'linux' && matrix.cpp_compiler == 'clang++' && matrix.build_type == 'Release')
        
  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from CMakeLists.txt
        id: extract_version
        shell: bash
        run: |
            VERSION=$(sed -nE 's/.*project\s*\(\s*FromBones\s+VERSION\s+([0-9]+\.[0-9]+\.[0-9]+).*/\1/p' CMakeLists.txt)
            echo "VERSION=$VERSION"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
               
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag_name: v${{ steps.extract_version.outputs.version }}
          name: "FromBones v${{ steps.extract_version.outputs.version }}"
          draft: false
          prerelease: true
          files: ./artifacts/**/*.zip            

